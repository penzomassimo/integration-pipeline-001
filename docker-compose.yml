
version: "3.9"

services:

  postgresdb-svc:
    build:
      context: ./postgresdb-svc/dockerfiles
      dockerfile: Dockerfile
    restart: always
    environment: 
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: db-1
    ports:
      - target: 5432
        host_ip: 127.0.0.1
        published: 5432
        protocol: tcp
        mode: host
    volumes:
      - ./postgresdb-svc/postgres-data:/var/lib/postgresql/data
      # - ./postgresdb-svc/scripts:/docker-entrypoint-initdb.d
    networks:
      - default


  postgresdb-app-1-svc:
    build:
      context: ./postgresdb-app-1-svc/dockerfiles
      dockerfile: Dockerfile
    restart: always
    environment: 
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: db-app-1
    ports:
      - target: 5432
        host_ip: 127.0.0.1
        published: 5433
        protocol: tcp
        mode: host
    volumes:
      - ./postgresdb-app-1-svc/postgres-data:/var/lib/postgresql/data
      # - ./postgresdb-svc/scripts:/docker-entrypoint-initdb.d
    networks:
      - default


  postgresdb-app-2-svc:
    build:
      context: ./postgresdb-app-2-svc/dockerfiles
      dockerfile: Dockerfile
    restart: always
    environment: 
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: db-app-2
    ports:
      - target: 5432
        host_ip: 127.0.0.1
        published: 5434
        protocol: tcp
        mode: host
    volumes:
      - ./postgresdb-app-2-svc/postgres-data:/var/lib/postgresql/data
      # - ./postgresdb-svc/scripts:/docker-entrypoint-initdb.d
    networks:
      - default


  postgresdb-app-3-svc:
    build:
      context: ./postgresdb-app-3-svc/dockerfiles
      dockerfile: Dockerfile
    restart: always
    environment: 
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: db-app-3
    ports:
      - target: 5432
        host_ip: 127.0.0.1
        published: 5435
        protocol: tcp
        mode: host
    volumes:
      - ./postgresdb-app-3-svc/postgres-data:/var/lib/postgresql/data
      # - ./postgresdb-svc/scripts:/docker-entrypoint-initdb.d
    networks:
      - default


  pgadmin-svc:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - target: 80
        host_ip: 127.0.0.1
        published: 80
        protocol: tcp
        mode: host
    volumes:
       - ./pgadmin-svc/pgadmin-data:/var/lib/pgadmin
    networks:
      - default
    depends_on:
      - postgresdb-svc
      - postgresdb-app-1-svc
      - postgresdb-app-2-svc
      - postgresdb-app-3-svc


  nifi-zookeeper-svc:
    image: 'zookeeper:latest'
    restart: always
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
        - default


  nifi-registry-svc:
    image: 'apache/nifi-registry:latest'
    restart: always
    ports:
      - target: 18080
        host_ip: 127.0.0.1
        published: 18080
        protocol: tcp
        mode: host
    environment:
      LOG_LEVEL: INFO
      NIFI_REGISTRY_DB_DIR: /opt/nifi-registry/nifi-registry-current/database
      NIFI_REGISTRY_FLOW_PROVIDER: file
      NIFI_REGISTRY_FLOW_STORAGE_DIR: /opt/nifi-registry/nifi-registry-current/flow_storage
    volumes:
      - ./nifi-registry-svc/database:/opt/nifi-registry/nifi-registry-current/database
      - ./nifi-registry-svc/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
    networks:
      - default


  nifi-svc:
    image: 'apache/nifi:latest'
    restart: always
    ports:
      - '8091:8080'
    environment:
      NIFI_WEB_HTTP_PORT: 8080
      NIFI_CLUSTER_IS_NODE: true
      NIFI_CLUSTER_NODE_PROTOCOL_PORT: 8082
      NIFI_ZK_CONNECT_STRING: nifi-zookeeper-svc:2181
      NIFI_ELECTION_MAX_WAIT: 30 sec
      NIFI_SENSITIVE_PROPS_KEY: '12345678901234567890A'
    volumes:
      - ./nifi-svc/database_repository:/opt/nifi/nifi-current/database_repository
      - ./nifi-svc/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./nifi-svc/content_repository:/opt/nifi/nifi-current/content_repository
      - ./nifi-svc/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./nifi-svc/state:/opt/nifi/nifi-current/state
      - ./nifi-svc/logs:/opt/nifi/nifi-current/logs
      - ./nifi-svc/conf:/opt/nifi/nifi-current/conf     # NOTE - manually copy the /conf folder from the container to the local machine and then re-start the container
      - ./nifi-svc/lib:/opt/nifi/nifi-current/lib       # NOTE - manually copy the /conf folder from the container to the local machine and then re-start the container
    networks:
      - default
    depends_on:
      - postgresdb-svc
      - postgresdb-app-1-svc
      - postgresdb-app-2-svc
      - postgresdb-app-3-svc


  svftp-svc:
    image: fauria/vsftpd:latest
    restart: always
    environment:
      FTP_USER: adminuser
      FTP_PASS: adminpass
      PASV_ENABLE: NO
      # PASV_ADDRESS: 127.0.0.1
      # PASV_MIN_PORT: 21100
      # PASV_MAX_PORT: 21110
    volumes:
      - ./svftp-svc/svftp-data:/home/vsftpd
      - ./svftp-svc/svftp-log-data:/var/log/vsftpd
      - ./svftp-svc/svftp-config:/etc/vsftp
    ports:
      - 0.0.0.0:20:20
      - 0.0.0.0:21:21
      # - "21100-21110:21100-21110"
    networks:
      - default


networks:
  default:
    name: project-network
